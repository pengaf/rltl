//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "../../paf/pafcore/Utility.h"
#include "SmartPtr.h"
namespace paf{ class ClassType; }

#include "impl/utility.h"
#include "impl/num_array.h"



namespace rltl
{
	class NumArray
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}
	};

	class Space : public paf::Introspectable
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}
	};

	class IndexSpace : public Space
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}
	};

	class VectorSpace : public Space
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}
	};

	enum class EnvironmentStatus
	{
		es_normal,
		es_terminated,
		es_truncated
	};

	class Environment : public paf::Introspectable
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}

		virtual ::paf::SharedPtr<Space> stateSpace() = 0 ;
		virtual ::paf::SharedPtr<Space> actionSpace() = 0 ;
		virtual NumArray reset(int seed) = 0 ;
		virtual EnvironmentStatus step(float& output1, NumArray& output2, NumArray const & action) = 0 ;
		virtual void close() = 0 ;
	};

	class Callback : public paf::Introspectable
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}

		virtual void beginTrain();
		virtual void beginEpisode(uint32_t episode);
		virtual void beginStep(uint32_t episode,uint32_t step);
		virtual void endStep(uint32_t episode,uint32_t step,float reward);
		virtual void endEpisode(uint32_t episode,uint32_t totalStepsInEpisode,float totalRewardsInEpisode);
		virtual void endTrain();
	};


}