//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

namespace paf{ class ClassType; }

namespace rltl
{
	template <typename State_t>
	class StateValueFunction
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}


	public:
		typedef State_t State_t;
		

		virtual float getValue(State_t const & state)const ;
		virtual void setValue(State_t const & state,float const & value);
	};


	template <typename State_t,typename Action_t>
	class ActionValueFunction
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}


	public:
		typedef State_t State_t;
		typedef Action_t Action_t;
		
	public:

		virtual float getValue(State_t const & state,Action_t const & action)const ;
	};

	template <typename State_t,typename Action_t>
	class ActionValueTable : public ActionValueFunction<State_t, Action_t, float>
	{
	public:
		static ::paf::ClassType* GetType();
		::paf::ClassType* getType()
		{
			return GetType();
		}
		void* getMemoryAddress()
		{
			return this;
		}

	};

}
